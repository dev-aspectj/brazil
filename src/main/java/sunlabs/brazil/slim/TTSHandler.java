/*
 * TTSHandler.java
 *
 * Brazil project web application toolkit,
 * export version: 2.3 
 * Copyright (c) 2002-2006 Sun Microsystems, Inc.
 *
 * Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License Version 
 * 1.0 (the "License"). You may not use this file except in compliance with 
 * the License. A copy of the License is included as the file "license.terms",
 * and also available at http://www.sun.com/
 * 
 * The Original Code is from:
 *    Brazil project web application toolkit release 2.3.
 * The Initial Developer of the Original Code is: lc138592.
 * Portions created by lc138592 are Copyright (C) Sun Microsystems, Inc.
 * All Rights Reserved.
 * 
 * Contributor(s): lc138592, suhler.
 *
 * Version:  2.3
 * Created by lc138592 on 02/07/18
 * Last modified by suhler on 06/11/13 15:31:14
 *
 * Version Histories:
 *
 * 2.3 06/11/13-15:31:14 (suhler)
 *   MatchString moved packages from "handler" to "util"
 *
 * 2.2 03/07/07-14:06:21 (suhler)
 *   lint
 *
 * 2.1 02/10/01-16:36:02 (suhler)
 *   version change
 *
 * 1.3 02/08/06-11:23:41 (suhler)
 *   remove * imports
 *   rename
 *
 * 1.2 02/08/05-17:02:01 (lc138592)
 *   Added JavaDocs
 *
 * 1.2 70/01/01-00:00:02 (Codemgr)
 *   SunPro Code Manager data about conflicts, renames, etc...
 *   Name history : 2 1 slim/TTSHandler.java
 *   Name history : 1 0 slim/TTSHandle.java
 *
 * 1.1 02/07/18-17:33:49 (lc138592)
 *   date and time created 02/07/18 17:33:49 by lc138592
 *
 */

package sunlabs.brazil.slim;

// Leo Chao, May 23, 2002
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import sunlabs.brazil.util.MatchString;
import sunlabs.brazil.server.Handler;
import sunlabs.brazil.server.Request;
import sunlabs.brazil.server.Server;
import java.util.Hashtable;
import sunlabs.brazil.util.http.HttpInputStream;
import sunlabs.brazil.util.regexp.Regexp;


/**
 * This class is responsible for sending text strings to a specified FreeTTS
 * server and returning the resulting audio data to the proper place.  Unlike
 * TTSServerHandler this class does not require that the FreeTTS engine be
 * loaded in this server, rather it uses a socket to talk to the Client-Server
 * interface (that ships with the Free TTS package) on another server.
 * <p>
 * The query parameter <b>transtext</b> is expected to hold the text to be
 * translated and a document response is sent containing the audio data.
 * <p>
 * Configuration File Parameters:<br>
 * <dl class=props>
 * <dt>server</dt>
 * <dd>IP of the Free TTS server</dd>
 * <dt>port</dt>
 * <dd>Port number for the Free TTS server</dd>
 * <dt>rate</dt>
 * <dd>Sampling rate</dd>
 * <dt>encoding</dt>
 * <dd>Determines the encoding.</dd>
 * </dl>
 *
 * @author Leo Chao
 */
public class TTSHandler implements Handler
{
    /**
     * Initializes the handler.  Basically ensures that all the parameters it needs
     * are present.
     *
     * @param server {@link sunlabs.brazil.server.Server Server} object provided by the webserver.
     * @param prefix String indicating the URL-prefix expected for processing
     * @return Returns true if the TTS server parameters are present
     */
    public boolean init(Server server, String prefix)
    {
	//initialize class variables
	cPre = prefix;
	cSer = server;
	cMatchString = new MatchString(prefix, server.props);

	// server parameters
	cTTSServer = (String)(cSer.props.getProperty(cPre+"server"));
	cTTSPort = (String)(cSer.props.getProperty(cPre+"port", "5555"));
	cEncoding = (String)(server.props.getProperty(cPre+"encoding", BASIC8));
	cSampling = (String)(server.props.getProperty(cPre+"rate", "8000"));
	
	//If there is NO server or port for tts recognition, we need to terminate

	if ((cTTSServer == null) || (cTTSPort == null)) {
	    cSer.log(Server.LOG_ERROR, this, "Missing TTS server and/or port parameters");
	    return false;
	}
	return true;
    }

    private void determineParam(Hashtable props)
    {
	String samp, encode;
	int debug = -1;

	samp = (String)(props.get("rate"));
	encode = (String)(props.get("encoding"));

	if (samp != null)
	    cSampling = samp;
	if (encode != null)
	    cEncoding = encode;

	if (cEncoding.equals(BASIC8))
	    cSampling="8000";
	else cSampling="16000";

	cSer.log(Server.LOG_INFORMATIONAL, this, "Parameters: sampling = " + cSampling + " encode = " + cEncoding);
    }

    /**
     * Handles Text to Speech requests by piping appropriately formatted requests to
     * the TTS server (as specified in the config parameters) and sending the response
     * back as a document.
     *
     * @param req {@link sunlabs.brazil.server.Request Request} object passed in by the webserver.
     * @return Returns true if an audio file is successfully returned.
     */
    public boolean respond(Request req)
    {
	String text, sizeStr;
	int size;
	Hashtable props = req.getQueryData();
	PrintWriter pw = null;
	HttpInputStream dis = null;
	char c;
	
	//Ensure it is our request
	if (!isMyRequest(req))
	    return false;

	determineParam(props);

	// Open connection to the TTS server
	connectTTS();
    
	// Open streams to the TTS server
       	try {
	    pw = new PrintWriter(cOS, true);
	    dis = new HttpInputStream(cIS);
	} catch (Exception e) 
	{
	    cSer.log(Server.LOG_ERROR, this, "Error: opening streams\nException is:\n"+e);
	    req.props.put(cPre+"error", "IOStreams");
	}
	
	// Get string to translate to speech
	text = (String)(props.get("transtext"));
	if (text == null) {
	    cSer.log(Server.LOG_WARNING, this, "Error: No translation string found.");
	    text = "";
	}

	text = period.subAll(text, ",");  // turn .'s into ,'s
	text = tag.subAll(text, " ");  // turn tags into spaces
	
	//Send to TTS server
	if (pw != null)
	{
	    try
	    {
		cSer.log(Server.LOG_LOG, this, "Writing:\nTTS\n"+cSampling+"\n" + text + "\n");
		//the commands
		pw.print("TTS\n"+cSampling+"\n"+text+"\n");
		pw.flush();
		
		//get the size of the return
		sizeStr = dis.readLine();

		req.props.put(cPre+"size", sizeStr);
		size = Integer.parseInt(sizeStr);
		
		//read the response and return the designed type of response
		// STORE TO FILE SUPPORT DISABLED
		/*************************************
		if (props.get("tts_toFile") != null) {
		    storeToFile("rawsound.raw", size, dis);
		    req.props.put(cPre+"returnFile", "rawsound.raw");
		}
		if (props.get("tts_toDoc") != null)
		**************************************/

		sendVoice(req, size, dis);
	       
	    } catch (Exception e) 
	    {
		cSer.log(Server.LOG_ERROR, this, "Error: reading or writing\n Exception is:\n"+e);
		req.props.put(cPre+"error", "write/read");
		return false;
      	    }
	}
	
	closeTTS(pw, dis);

	return true;
    }

    public byte[] convert(byte[] b, int size)
    {
	byte[] convertedAudio = null;

	if ( (cEncoding.equals(BASIC8)) || (cEncoding.equals(BASIC16)) )
	    convertedAudio = convertToAudioBasic(b, size);
	else if (cEncoding.equals(WAV16))
	    convertedAudio = convertToWave(b, size);

	return convertedAudio;
    }

    ///////////////////
    // PRIVATE ////////
    ///////////////////

    private byte[] convertToAudioBasic(byte[] b, int size)
    {
	int i, A, B;
	short value, vb;
	byte[] nb = new byte[size/2];
	
	if(cSampling.equals("8000")) {
	    cSer.log(Server.LOG_DIAGNOSTIC, this, "Audio/basic 8-bit mu-law conversion starting");
	    for (i = 1;i<size;i+=2) {
		A = ((((int)(b[i-1])) & 0x000000ff) << 8) & 0x0000ff00;
		B = ((int)(b[i])) & 0x000000ff;
		
		value = (short)(((A | B)));
		vb = value;
		value = (short)(value >> 3);
		
		nb[(i-1)/2] = (byte)((rawToBasicTable[value+0x1000])&0x000000ff);
    	    }
	    
	    size = size /2;
	}
	else
	    nb = b;

	nb = tagBasicHeader(nb, size); 
	return nb;
    }
	
    private boolean isMyRequest(Request req)
    {
	Hashtable h = req.getQueryData();
	String s = null;

	if (!cMatchString.match(req.url)) {
	    return false;
	}
	
	s = (String)(h.get("transtext"));
	if (s == null) {	
	    return false;
	}

	return true;	    
    }

    private void sendVoice(Request req, int size, HttpInputStream is)
    {
	byte[] b = new byte[size];
	int readSize;

	cSer.log(Server.LOG_DIAGNOSTIC, this, "Sending response to document");

	try {
	    readSize = is.readFully(b, 0, size);
	    cSer.log(Server.LOG_DIAGNOSTIC, this, "Actual read = " + readSize);
	}
	catch (Exception e) {
	    cSer.log(Server.LOG_ERROR, this, "Error reading TTS response");
	    req.props.put(cPre+"error", "store");
	}

	b = convert(b, size);

	try {
	    cSer.log(Server.LOG_DIAGNOSTIC, this, "Sending response");	
	    req.sendResponse(b, "audio/basic");
	} catch(Exception e) {
	    cSer.log(Server.LOG_ERROR, this, "Error: Could not send response");
	    req.props.put(cPre+"error", "response");
        }
    }

    private void placeInt(byte[] b, int start, int value)
    {
	b[start]   = (byte)((value & 0xff000000) >> 24);
	b[start+1] = (byte)((value & 0x00ff0000) >> 16);
	b[start+2] = (byte)((value & 0x0000ff00) >> 8);
	b[start+3] =  (byte)(value & 0x000000ff);
    }

    private byte[] tagBasicHeader(byte[] sound, int size)
    {
	int headerSize = 24;
	int encoding;
	byte[] taggedSound = new byte[size+headerSize];

	taggedSound[0] = (byte)('.');
	taggedSound[1] = (byte)('s');
	taggedSound[2] = (byte)('n');
	taggedSound[3] = (byte)('d');
	
	if (cSampling.equals("8000"))
	    encoding = 1;
	else
	    encoding = 3;

	placeInt(taggedSound, 4, headerSize);
	placeInt(taggedSound, 8, size);
	placeInt(taggedSound, 12, encoding);
	placeInt(taggedSound, 16, Integer.parseInt(cSampling.trim()));
	placeInt(taggedSound, 20, 1);
	
	for(int i = 0;i < size;i++) {
	    taggedSound[i+headerSize] = sound[i];
	}

	return taggedSound;
    }

    private void storeToFile(String filename, int size, HttpInputStream is)
    {
	int bytesRead;
	byte[] b = new byte[size];
	FileOutputStream fos;
	Process sox;

	try
	{
	    bytesRead = is.readFully(b, 0, size);
	} catch (Exception e) {

	}
	
	try{

	    fos = new FileOutputStream(filename);	    
	    fos.write(b, 0, size);
	    fos.close();

	    sox = Runtime.getRuntime().exec("sox -r " + cSampling + " -sw -c1 " + filename + " -t .au sound.au");
	    sox.waitFor();
	    sox.destroy();
        }
	catch (Exception e)
        {

	}
    }

    private void connectTTS()
    {
	BufferedReader br = null;
	InputStream is;

	String ready = "";

	try {
	    cTTSConnect = new Socket(cTTSServer, Integer.parseInt(cTTSPort));
	    cIS = cTTSConnect.getInputStream();
	    cOS = cTTSConnect.getOutputStream();
	    cBR = new BufferedReader(new InputStreamReader(cIS));
	    while(!ready.equals("READY"))
	    {
		ready = cBR.readLine();
		cSer.log(Server.LOG_DIAGNOSTIC, this, "ready: " + ready);	
	    }
	} catch (Exception e) {
		cSer.log(Server.LOG_ERROR, this, "Error: initializing streams\nException is:\n"+e);	    
	}
    }

    private void closeTTS(PrintWriter pw, HttpInputStream dis)
    {
	try {
	    pw.close();
	    dis.close();

	    cIS.close();
	    cOS.close();
	    cTTSConnect.close();
	} catch (Exception e) {
	        cSer.log(Server.LOG_ERROR, this, "Error: could not close streams");
	}
    }
   
    private byte[] convertToWave(byte[] b, int size)
    {
	cSer.log(Server.LOG_WARNING, this, "Convert to wave files is not supported at this time");
	return b;
    }

    //Encoding constants
    public static String BASIC8 = "basic8";
    public static String BASIC16 = "basic16";
    public static String WAV16 = "wav16";

    //Class Data
    private String cPre;
    private Server cSer;
    private MatchString cMatchString;

    //TTS Connection parameters
    private String cTTSServer;
    private String cTTSPort;
    private String cSampling;
    private String cEncoding;
    private Socket cTTSConnect;    
    private BufferedReader cBR;
    private InputStream cIS;
    private OutputStream cOS;    

    // massage the incoming text

    static Regexp period = new Regexp("[.!:?]");	// funny punctuation
    static Regexp tag = new Regexp("(<[^>]*>)|[\001-\037]");		// html markup

    //This is the 13-bit to 8-bit conversion table
    private static final int[] rawToBasicTable = {
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
	  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
	  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
	  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
	  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
	  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
	  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
	  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
	  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
	  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
	  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,
	  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
	  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
	  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
	  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
	  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
	  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
	  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
	  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
	  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
	  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
	  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
	  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
	  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
	  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
	  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
	  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
	  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
	  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
	  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
	  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
	  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
	  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
	  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
	  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
	  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13,
	 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15,
	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16,
	 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17,
	 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20,
	 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22,
	 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26,
	 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28,
	 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29,
	 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30,
	 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31,
	 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32,
	 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33,
	 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35,
	 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39,
	 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40,
	 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41,
	 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44,
	 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48,
	 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
	 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51,
	 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60,
	 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61,
	 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62,
	 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64,
	 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65,
	 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67,
	 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68,
	 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70,
	 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72,
	 72, 72, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74,
	 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 77, 77,
	 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79,
	 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 83,
	 83, 83, 83, 83, 84, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86,
	 86, 87, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 89, 90, 90, 90,
	 91, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95,
	 96, 96, 96, 97, 97, 98, 98, 98, 99, 99,100,100,101,101,101,102,
	102,103,103,104,104,105,106,106,107,107,108,109,109,110,110,111,
	112,113,113,114,115,116,117,118,119,120,121,122,123,124,125,127,
	255,253,252,251,250,249,248,247,246,245,244,243,242,241,241,240,
	239,238,238,237,237,236,235,235,234,234,233,232,232,231,231,230,
	230,229,229,229,228,228,227,227,226,226,226,225,225,224,224,224,
	223,223,223,222,222,222,221,221,221,220,220,220,219,219,219,219,
	218,218,218,217,217,217,217,216,216,216,216,215,215,215,215,214,
	214,214,214,213,213,213,213,212,212,212,212,212,211,211,211,211,
	211,210,210,210,210,210,209,209,209,209,209,208,208,208,208,208,
	207,207,207,207,207,207,206,206,206,206,206,206,205,205,205,205,
	205,205,204,204,204,204,204,204,204,203,203,203,203,203,203,203,
	202,202,202,202,202,202,202,201,201,201,201,201,201,201,200,200,
	200,200,200,200,200,200,199,199,199,199,199,199,199,199,198,198,
	198,198,198,198,198,198,197,197,197,197,197,197,197,197,197,196,
	196,196,196,196,196,196,196,196,195,195,195,195,195,195,195,195,
	195,195,194,194,194,194,194,194,194,194,194,194,193,193,193,193,
	193,193,193,193,193,193,192,192,192,192,192,192,192,192,192,192,
	192,191,191,191,191,191,191,191,191,191,191,191,190,190,190,190,
	190,190,190,190,190,190,190,190,189,189,189,189,189,189,189,189,
	189,189,189,189,189,188,188,188,188,188,188,188,188,188,188,188,
	188,188,187,187,187,187,187,187,187,187,187,187,187,187,187,186,
	186,186,186,186,186,186,186,186,186,186,186,186,186,185,185,185,
	185,185,185,185,185,185,185,185,185,185,185,185,184,184,184,184,
	184,184,184,184,184,184,184,184,184,184,184,183,183,183,183,183,
	183,183,183,183,183,183,183,183,183,183,183,182,182,182,182,182,
	182,182,182,182,182,182,182,182,182,182,182,182,181,181,181,181,
	181,181,181,181,181,181,181,181,181,181,181,181,181,181,180,180,
	180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,
	179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,
	179,179,179,178,178,178,178,178,178,178,178,178,178,178,178,178,
	178,178,178,178,178,178,178,177,177,177,177,177,177,177,177,177,
	177,177,177,177,177,177,177,177,177,177,177,177,176,176,176,176,
	176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,
	176,176,175,175,175,175,175,175,175,175,175,175,175,175,175,175,
	175,175,175,175,175,175,175,175,175,174,174,174,174,174,174,174,
	174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,
	173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,
	173,173,173,173,173,173,173,173,173,172,172,172,172,172,172,172,
	172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
	172,172,172,171,171,171,171,171,171,171,171,171,171,171,171,171,
	171,171,171,171,171,171,171,171,171,171,171,171,171,171,170,170,
	170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,
	170,170,170,170,170,170,170,170,170,170,170,169,169,169,169,169,
	169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,
	169,169,169,169,169,169,169,169,168,168,168,168,168,168,168,168,
	168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,
	168,168,168,168,168,168,168,167,167,167,167,167,167,167,167,167,
	167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,
	167,167,167,167,167,167,167,166,166,166,166,166,166,166,166,166,
	166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,
	166,166,166,166,166,166,166,166,166,165,165,165,165,165,165,165,
	165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,
	165,165,165,165,165,165,165,165,165,165,165,165,164,164,164,164,
	164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,
	164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,
	163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,
	163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,
	163,163,163,163,163,163,163,162,162,162,162,162,162,162,162,162,
	162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,
	162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,161,
	161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,
	161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,
	161,161,161,161,161,161,161,161,160,160,160,160,160,160,160,160,
	160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,
	160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,
	160,160,160,160,159,159,159,159,159,159,159,159,159,159,159,159,
	159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,
	159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,
	159,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
	158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
	158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
	158,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,
	157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,
	157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,
	157,157,157,156,156,156,156,156,156,156,156,156,156,156,156,156,
	156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,
	156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,
	156,156,156,156,156,156,155,155,155,155,155,155,155,155,155,155,
	155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,
	155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,
	155,155,155,155,155,155,155,155,155,155,155,155,155,154,154,154,
	154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,
	154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,
	154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,
	154,154,154,154,154,153,153,153,153,153,153,153,153,153,153,153,
	153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
	153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
	153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
	152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,
	152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,
	152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,
	152,152,152,152,152,152,152,152,152,152,152,152,152,152,151,151,
	151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,
	151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,
	151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,
	151,151,151,151,151,151,151,151,151,151,151,151,151,151,150,150,
	150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
	150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
	150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
	150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,
	150,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,
	149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,
	149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,
	149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,
	149,149,149,149,149,149,149,149,148,148,148,148,148,148,148,148,
	148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
	148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
	148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
	148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,
	148,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,
	147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,
	147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,
	147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,
	147,147,147,147,147,147,147,147,147,147,147,147,147,146,146,146,
	146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
	146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
	146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
	146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
	146,146,146,146,146,146,146,146,146,146,146,146,146,145,145,145,
	145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,
	145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,
	145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,
	145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,
	145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,
	145,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
	144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
	144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
	144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
	144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,
	144,144,144,144,144,144,144,144,143,143,143,143,143,143,143,143,
	143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,
	143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,
	143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,
	143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,
	143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,
	143,143,143,142,142,142,142,142,142,142,142,142,142,142,142,142,
	142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,
	142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,
	142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,
	142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,
	142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,
	142,142,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
	141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
	141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
	141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
	141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
	141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,
	141,141,141,141,141,140,140,140,140,140,140,140,140,140,140,140,
	140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
	140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
	140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
	140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
	140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
	140,140,140,140,140,140,140,140,140,140,140,140,140,139,139,139,
	139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
	139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
	139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
	139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
	139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
	139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
	139,139,139,139,139,139,139,139,139,138,138,138,138,138,138,138,
	138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,
	138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,
	138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,
	138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,
	138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,
	138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,
	138,138,138,138,138,138,138,138,138,138,137,137,137,137,137,137,
	137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
	137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
	137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
	137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
	137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
	137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
	137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
	136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
	136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
	136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
	136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
	136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
	136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
	136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,
	136,136,136,136,136,136,136,136,136,136,136,136,135,135,135,135,
	135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,
	135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,
	135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,
	135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,
	135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,
	135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,
	135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,
	135,135,135,135,135,135,135,135,135,135,135,135,134,134,134,134,
	134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
	134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
	134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
	134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
	134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
	134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
	134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
	134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
	134,134,134,133,133,133,133,133,133,133,133,133,133,133,133,133,
	133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
	133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
	133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
	133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
	133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
	133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
	133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
	133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,
	132,132,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,
	131,131,131,131,131,131,131,131,131,131,131,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
	130,130,130,130,130,130,130,130,130,130,130,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,
	129,129,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,
	128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128 
    };
}
