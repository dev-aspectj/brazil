; Conference Manager dial plan (take-2)
;
; Copyright (c) 2004-2007 Sun Microsystems, Inc.
; The contents of this file are subject to the Sun Public License Version
; 1.0 (the "License"). You may not use this file except in compliance with
; the License. A copy of the License is included as the file "license.terms",
; and also available at http://www.sun.com/
;
;  - prompt for a conference number
;  - look up conf in astdb
;  - Prompt for a password or "#" if not required
;  - look up meetme options associated with the password
;  - start the conference
; DB settings:
;  conf${conf}/opts=opts		meetme options if no password is required
;  conf${conf}/${pass}opts=opts		These are the meetme options to use for this password
;  conf${conf}/title			The conference title
;  conf${conf}/maxusers			The maximum number of users
; Notes:
;    allow type-ahead 

; users calling in to the conference start here

[conf2]
exten => s,1,Noop(Call from ${CALLERID(all)} to ${exten})
exten => s,n,Answer
exten => s,n,Set(trys=1)
exten => s,n,Wait(2)

exten => s,n(start),Noop()
exten => s,n,Agi(freetts|Welcome to the sun labs conference system|123456789)
exten => s,n,Gotoif($[${complete} < 35]?wait)	; user hit a key too soon :)
exten => s,n,Gotoif($["x${digit}" != "x"]?gotdigit) ; support type ahead

exten => s,n(intro),Noop()
exten => s,n,Agi(freetts|Please enter your conference number followed by the pound key|123456789)

exten => s,n(gotdigit),Noop()
exten => s,n,Read(conf||5)	; should be 4 if digits is defined XXX
exten => s,n,Set(conf=${digit}${conf})
exten => s,n,Set(digit=)
exten => s,n,GotoIf($["${conf}" = ""]?nodigit) 	;no number entered

; we have the conference # in ${conf}

exten => s,n,Noop(Selected conference ${conf})
exten => s,n,GotoIf(${DB_EXISTS(conf${conf}/opts)}?:needpass) 	;no password req'd XXX

; password is optional, let user decide

exten => s,n,Agi(freetts|you may enter a pass code for conference ${conf} or just go right for the pound key. |0123456789#)
exten => s,n,Noop(digit=${digit})
exten => s,n,GotoIf($["${digit}" = "#"]?gotpass:readpass) 

; Get a valid password, or punt back to asking for a conference #

exten => s,n(needpass),Noop()
exten => s,n,Agi(freetts|please enter your pass code for conference ${conf} followed by the pound key|0123456789)

exten => s,n(readpass),Noop(got=${digit} reading rest of conference password)
exten => s,n,Read(pass||5)
exten => s,n,Noop(${digit}/${pass} looking for conf${conf}/${digit}${pass}opts))
exten => s,n,GotoIf(${DB_EXISTS(conf${conf}/${digit}${pass}opts)}?gotpass) 	
exten => s,n,Set(digit=)
exten => s,n,Agi(freetts|In valid password, sorry|)
exten => s,n,Goto(retry)

; We have a valid password, speak the conference title, if any

exten => s,n(gotpass),Noop()
exten => s,n,Set(meetmeopts=${DB_RESULT})
exten => s,n,GotoIf(${DB_EXISTS(conf${conf}/title)}?:notitle)
exten => s,n,Agi(freetts|welcome to the ${DB_RESULT} conference|#)

; Check to make sure there is enough room in the conference, then start it.

exten => s,n(notitle),Noop()
exten => s,n,GotoIf(${DB_EXISTS(conf${conf}/maxusers)}?:meetme)
exten => s,n,MeetmeCount(${conf},count)
exten => s,n,GotoIf($[${count} >= ${DB_RESULT}]?full)
exten => s,n(meetme),Meetme(${conf},${meetmeopts})

; We'll do something more sophisticated later. For now, exit, then go ask for a new conference

exten => s,n,agi(freetts|You have now left conference ${conf}|#)
exten => s,n,Set(digit=)
exten => s,n,Goto(intro)

;;;;;;;;;;;;;;
; error stuff

; conference is full

exten => s,n(full), NoOp(Conference full)
exten => s,n,Agi(freetts|sorry.  This conference is full.)
exten => s,n,Goto(retry)

; hit key too soon, annoy the user

exten => s,n(wait),Noop(too anxious)
exten => s,n,Agi(freetts|Geez let me finish)
exten => s,n,Set(digit=)
exten => s,n,Goto(retry)

; no conf number entered

exten => s,n(nodigit),Agi(freetts|"Okay. you do not know your conference number.")
exten => s,n,Goto(retry)

; bump "try" counter, and go again

exten => s,n(retry),Noop()
exten => s,n,set(trys=$[${trys}+1])
exten => s,n,GotoIf($[${trys} > 3]?:intro) 	;go back to the intro
exten => s,n,Agi(freetts|Thank you for using the conferencing system. and have a nice day.)
exten => s,n,Hangup()

; The remaining contexts are used from the manager in "originate" actions


; This is used to play a file into the conference

[ami-joinmeeting]
exten => _X.,1,Noop(entering conference ${EXTEN})
exten => _X.,n,Meetme(${EXTEN},dqta)
exten => _X.,n,Hangup()

; Meeting administration
; - use the extension to encode the conference number
; - use "command" to encode the user and option (the option is the 1st character)

[ami-meetmeadmin]
exten => _X.,1,MeetMeAdmin(${EXTEN},${command:0:1},${command:1})
exten => _X.,n,Hangup()

; Used for text->speech generation from the manager.
; We can't send audio over the manager interface, so we'll
; run an AGI script to do it.  UserEvents are used as a completion callback
; to the manager.

[ami-meetmegenerate]
exten => _X.,1,Noop("Generating freetts with message ${message}")
exten => _X.,n,agi(freetts|"${message}"|X)
exten => _X.,n,UserEvent(MeetmeWhisper|filename: ${file})
exten => _X.,n,Hangup()

; Place a call to a phone, and have them join a meeting
; This leg calls the extension
;   EXTEN is the extension to call
;   confno is the conference to join

[ami-callformeeting]
exten => _X.,1,Noop(callformeeting: confno ${confno} for extension ${EXTEN})
; The following line will need to be customized for your installation
exten => _X.,n,Dial(IAX2/main_pbx/${EXTEN},30)
exten => _X.,n,UserEvent(Meetme${confno}|Callstatus: ${DIALSTATUS})
exten => _X.,n,Hangup()

; This leg connects the dialed user to the conference.
; The hardwired stuff should be parameterized (some day)
; The "Userevent" entries are monitored by the web interface.

[ami-calljoinmeeting]
exten => s,1,Noop(calljoinmeeting: ext ${EXTEN} for conf ${confno})
exten => s,n,UserEvent(Meetme${confno}|Callstatus: Deciding)
exten => s,n,Wait(2)
exten => s,n,GotoIf(${DB_EXISTS(conf${confno}/title)}?:notitle)
exten => s,n,Agi(freetts|You have been invited to join the ${DB_RESULT} conference|#)
exten => s,n,Goto(prompt)
exten => s,n(notitle),Agi(freetts|You have been invited to join a conference|#)
exten => s,n(prompt),Agi(freetts|press one now if you wish to join|1#)
exten => s,n,GotoIf($["${digit}" = "1"]?join) 
exten => s,n,Read(join||1)
exten => s,n,GotoIf($["${join}" = "1"]?join) 
exten => s,n,UserEvent(Meetme${confno}|Callstatus: Declined)
exten => s,n,Playback(vm-goodbye)
exten => s,n,Hangup()

exten => s,n(join),Noop(join)
exten => s,n,UserEvent(Meetme${confno}|Callstatus: Joining)
exten => s,n,Meetme(${confno},zdToMcs)
exten => s,n,Hangup()
